# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162f9jdcbLGmCYCr-B01lZVZGPL0PIpfu
"""

import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model

#x is the input num_filters is the number of filter we want to use in cn layer
def conv_block(x, num_filters):
    x = Conv2D(num_filters, (3, 3), padding="same")(x)#using convolutional 
    x = BatchNormalization()(x)#batch normalization improves the performences
    x = Activation("relu")(x)

    x = Conv2D(num_filters, (3, 3), padding="same")(x)
    x = BatchNormalization()(x)
    x = Activation("relu")(x)

    return x

def build_model():
    size = 224 #input size
    num_filters = [16, 32, 48, 64] #filters can go on like 128, 256
    inputs = Input((size, size, 3))#setting the input layer (256, 256, 3)

    skip_x = []#creating a list to store x's information
    x = inputs
    ## Encoder
    for f in num_filters:
        x = conv_block(x, f)
        skip_x.append(x)#added append skip connection to the list
        x = MaxPool2D((2, 2))(x)#performing 2D max pooling

    ## Bridge
    x = conv_block(x, num_filters[-1])#using last filter to join the decoder part with encoder

    num_filters.reverse()#reversing the filters
    skip_x.reverse()#reversing the skip connection
    ## Decoder
    for i, f in enumerate(num_filters):
        x = UpSampling2D((2, 2))(x)#upsampling used to copies information from one pixel to another
        xs = skip_x[i]#extracting information from the list
        x = Concatenate()([x, xs])
        x = conv_block(x, f)
        #print(type(x))
    ## Output
    x = Conv2D(1, (1, 1), padding="same")(x)
    x = Activation("sigmoid")(x)#using sigmoid activation to get out in 0 and 1

    return Model(inputs, x)


if __name__ == "__main__":
    model = build_model()
    model.summary()